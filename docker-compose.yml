services:
    # Laravel application service
    app:
        build:
            context: . # Build the image from the current directory
            dockerfile: Dockerfile # Use the specified Dockerfile
        container_name: laravel_app  # Name of the container
        restart: always  # Automatically restart on failure
        working_dir: /var/www # Set the working directory inside the container
        volumes:
            - .:/var/www # Mount the project directory into the container
        depends_on:
            - db # Ensure the database starts before the app
        networks:
            - laravel_network # Connect to the custom network

    # MySQL database service
    db:
        image: mysql:8.0 # Use MySQL 8.0 image
        container_name: mysql_db  # Name of the container
        restart: always # Automatically restart on failure
        environment:
            MYSQL_ROOT_PASSWORD: XHDEcNOI2I3p # Root password for MySQL
            MYSQL_DATABASE: laravel # Default database name
            MYSQL_USER: laravel # MySQL user
            MYSQL_PASSWORD: X0VsIJGZPGZ% # MySQL user password
        ports:
            - "3306:3306" # Expose MySQL port
        volumes:
            - db_data:/var/lib/mysql  # Persist database data
        networks:
            - laravel_network # Connect to the custom network

    # Nginx web server service
    nginx:
        image: nginx:latest # Use the latest Nginx image
        container_name: nginx_server # Name of the container
        restart: always # Automatically restart on failure
        ports:
            - "80:80"  # Expose port 80 for HTTP traffic
        volumes:
            - .:/var/www # Mount project directory
            - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf  # Mount custom Nginx config
        depends_on:
            - app # Ensure the app service starts first
        networks:
            - laravel_network # Connect to the custom network

# Define a custom network for services to communicate
networks:
    laravel_network:

# Define a volume for persistent database storage
volumes:
    db_data:
